time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#Fit homogeneous semi-Markov empirical Bayes model.
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
#argument 'groups' of coxrfx
groups<-rep("unique_group",length(param))
#fit random effects model
coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")
coefficient_estimates[j,]<-coxrfx_object$coefficients
mu_estimates[j,]<-coxrfx_object$mu
sigma2_estimates[j,]<-coxrfx_object$sigma2
#fit fixed effects model
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
coefficient_estimates_coxph[j,]<-coxph_object$coefficients
if(j %%10==0){
save(coefficient_estimates,mu_estimates,sigma2_estimates,coefficient_estimates_coxph,param,file = file1)
}
print(j)
}
debugonce(model.frame.default)
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)
coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
for (j in 1:nr_simulated_data_sets){
#covariates
if(length(covariate_names)>1){
covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
}else{
covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
}
colnames(covariate_matrix)<-covariate_names
#relative risks (relative hazards)
rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
#Generate a transition history for each patient. Homogeneous semi-Markov model. Baseline hazard is Gompertz for all transitions.
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
m<-cbind(m,rexp(n,0.03))
m<-cbind(m,(m[,5]<m[,4]))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
m<-as.data.frame(m)
#convert the data to long format
mstate.data<-data.frame()
for(i in 1:nrow(m)){
id<-rep(i,2)
from<-c(1,1)
to<-c(2,3)
trans<-c(1,2)
Tstart<-c(0,0)
Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
time<-Tstop-Tstart
status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status))
if(status[1]==1){
id<-i
from<-2
to<-4
trans<-3
Tstart<-Tstop[1]
Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#Fit homogeneous semi-Markov empirical Bayes model.
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
#argument 'groups' of coxrfx
groups<-rep("unique_group",length(param))
#fit random effects model
coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")
coefficient_estimates[j,]<-coxrfx_object$coefficients
mu_estimates[j,]<-coxrfx_object$mu
sigma2_estimates[j,]<-coxrfx_object$sigma2
#fit fixed effects model
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
coefficient_estimates_coxph[j,]<-coxph_object$coefficients
if(j %%10==0){
save(coefficient_estimates,mu_estimates,sigma2_estimates,coefficient_estimates_coxph,param,file = file1)
}
print(j)
}
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)
coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
j
#covariates
if(length(covariate_names)>1){
covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
}else{
covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
}
colnames(covariate_matrix)<-covariate_names
#relative risks (relative hazards)
rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
m<-cbind(m,rexp(n,0.03))
m<-cbind(m,(m[,5]<m[,4]))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
m<-as.data.frame(m)
#convert the data to long format
mstate.data<-data.frame()
for(i in 1:nrow(m)){
id<-rep(i,2)
from<-c(1,1)
to<-c(2,3)
trans<-c(1,2)
Tstart<-c(0,0)
Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
time<-Tstop-Tstart
status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status))
if(status[1]==1){
id<-i
from<-2
to<-4
trans<-3
Tstart<-Tstop[1]
Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
#argument 'groups' of coxrfx
groups<-rep("unique_group",length(param))
#fit random effects model
coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")
coefficient_estimates[j,]<-coxrfx_object$coefficients
mu_estimates[j,]<-coxrfx_object$mu
sigma2_estimates[j,]<-coxrfx_object$sigma2
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
knitr::opts_chunk$set(echo = TRUE)
set.seed(20078)
#library(flexsurv)
library(mvtnorm)
library(ebsurv)
#library(mstate)
setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:10) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-1
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters
file1<-"../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_10vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata"
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)
coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
#covariates
if(length(covariate_names)>1){
covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
}else{
covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
}
colnames(covariate_matrix)<-covariate_names
#relative risks (relative hazards)
rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
m<-cbind(m,rexp(n,0.03))
m<-cbind(m,(m[,5]<m[,4]))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
m<-as.data.frame(m)
#convert the data to long format
mstate.data<-data.frame()
for(i in 1:nrow(m)){
id<-rep(i,2)
from<-c(1,1)
to<-c(2,3)
trans<-c(1,2)
Tstart<-c(0,0)
Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
time<-Tstop-Tstart
status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status))
if(status[1]==1){
id<-i
from<-2
to<-4
trans<-3
Tstart<-Tstop[1]
Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
#argument 'groups' of coxrfx
groups<-rep("unique_group",length(param))
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
traceback()
model_formula
debug(eval)
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
knitr::opts_chunk$set(echo = TRUE)
set.seed(20078)
#library(flexsurv)
library(mvtnorm)
#library(ebsurv)
#library(mstate)
setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:10) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-1
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters
file1<-"../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_10vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata"
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)
coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
#covariates
if(length(covariate_names)>1){
covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
}else{
covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
}
colnames(covariate_matrix)<-covariate_names
#relative risks (relative hazards)
rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
m<-cbind(m,rexp(n,0.03))
m<-cbind(m,(m[,5]<m[,4]))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
m<-as.data.frame(m)
#convert the data to long format
mstate.data<-data.frame()
for(i in 1:nrow(m)){
id<-rep(i,2)
from<-c(1,1)
to<-c(2,3)
trans<-c(1,2)
Tstart<-c(0,0)
Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
time<-Tstop-Tstart
status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status))
if(status[1]==1){
id<-i
from<-2
to<-4
trans<-3
Tstart<-Tstop[1]
Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
model_formula
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
names(Z)
formula
model_formula
Z$transition<-Z$strata
Z$strata<-NULL
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(transition)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
knitr::opts_chunk$set(echo = TRUE)
set.seed(20078)
#library(flexsurv)
library(mvtnorm)
library(ebsurv)
#library(mstate)
setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:10) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-1
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters
file1<-"../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_10vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata"
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)
coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
#covariates
if(length(covariate_names)>1){
covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
}else{
covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
}
colnames(covariate_matrix)<-covariate_names
#relative risks (relative hazards)
rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
j
j<-1
m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
m<-cbind(m,rexp(n,0.03))
m<-cbind(m,(m[,5]<m[,4]))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
m<-as.data.frame(m)
#convert the data to long format
mstate.data<-data.frame()
for(i in 1:nrow(m)){
id<-rep(i,2)
from<-c(1,1)
to<-c(2,3)
trans<-c(1,2)
Tstart<-c(0,0)
Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
time<-Tstop-Tstart
status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status))
if(status[1]==1){
id<-i
from<-2
to<-4
trans<-3
Tstart<-Tstop[1]
Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
time<-Tstop-Tstart
status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
Tstart=Tstart,Tstop=Tstop,time=time,status=status))
}
}
#add covariates
mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
#attributes and class
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
class(mstate.data)<-c("data.frame","msdata")
attr(mstate.data,"trans")<-tmat
#expand covariates
mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
#argument 'Z' of coxrfx
Z<-mstate.data[,-(1:(8+length(covariate_names)))]
Z$strata<-mstate.data$trans
#argument 'surv' of coxrfx
surv<-survival::Surv(mstate.data$time,mstate.data$status)
#argument 'groups' of coxrfx
groups<-rep("unique_group",length(param))
#fit random effects model
coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")
coefficient_estimates[j,]<-coxrfx_object$coefficients
mu_estimates[j,]<-coxrfx_object$mu
sigma2_estimates[j,]<-coxrfx_object$sigma2
model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
coefficient_estimates_coxph[j,]<-coxph_object$coefficients
?model.frame
View(m)
library(ebsurv)
library(ebsurv)
library(ebsurv)
library(ebsurv)
library(ebsurv)
ebsurv:::msfit_generic.coxrfx
?ebsurv:::msfit_generic.coxrfx
library(ebsurv)
??`survival-internal`
?ebsurv::CoxRFX
library(ebsurv)
library(ebsurv)
library(ebsurv)
library(ebsurv)
install.packages('installr')
getwd()
source('~/.active-rstudio-document', echo=TRUE)
tmp
installedpkgs
rm(installedpkgs)
installedpkgs
load("~/Library/Mobile Documents/com~apple~CloudDocs/RWORK/packages/installed_old.rda")
installedpkgs
load("~/Library/Mobile Documents/com~apple~CloudDocs/RWORK/packages/installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
missing
install.packages(missing)
install.packages(missing)
update.packages()
library(ebsurv)
library(ebsurv)
library(devtools)
check_win_release("ebsurv")
getwd()
check_win_release(pkg = getwd())
check_win_devel(pkg = getwd())
check_win_oldrelease(pkg = getwd())
library(ebsurv)
check_win_devel(pkg = getwd())
check_win_devel(pkg = getwd())
library(ebsurv)
check_win_oldrelease(pkg = getwd())
library(ebsurv)
check_win_devel(pkg = getwd())
library(ebsurv)
library(ebsurv)
check_win_devel(pkg = getwd())
library(devtools)
check_win_devel(pkg = getwd())
?check_win_devel
check_win_release(pkg = getwd())
library(ebsurv)
library(devtools)
check_win_devel(pkg=getwd())
?build
?check_win
library(ebsurv)
library(ebsurv)
