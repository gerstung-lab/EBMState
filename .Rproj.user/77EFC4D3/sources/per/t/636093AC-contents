---
title: "Supplementary analysis"
author: "Rui Costa"
date: "13/03/2019"
header-includes: \usepackage{amsmath,amsfonts,amssymb,amsthm,verbatim}
output:
  html_document:
    number_sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# Consistency of estimators

The following plots are plots of true parameter values versus the average estimates obtained from 60 simulated data sets, where each data set was simulated under the same semi-Markov Cox model with random effects. Regression coefficients were held fixed throughout all simulations, but each data set has a new set of patients (i.e. a new covariate matrix).  The model used has the following features: 

* Transition structure: illness-death model (3 transitions);
* 50 covariates;
* Each covariate has a different regression coefficient for each transition, so there are 150 regression coefficients;
* The regression coefficients of each transition are split into two groups of 25 coefficients each, so there are 6 groups in total;
* The coefficients in each group were generated independently from the same normal distribution. Each group of 25 coefficients was generated from a different normal distribution;
* The baseline hazard was Gompertz for all transitions.


\
```{r echo=F}
load("../data/params_50covs_2groups_25_per_group.Rdata")
load( "../data/sim_illness_death_400obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
# load( "../data/sim_illness_death_1000obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
# load( "../data/sim_illness_death_2000obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
i<-"400"
local_path<-paste0("../data/sim_illness_death_",i,"obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
  load(local_path)
  par(mfrow=c(3,3),mar=c(2,2,2,2),oma = c(0, 0, 2.5, 0))
  plot(param[1:25],apply(coefficient_estimates[,seq(1,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 1 coefficients",col=1)
  abline(a=0,b=1)
  plot(param[26:50],apply(coefficient_estimates[,seq(76,150,3)],2,mean,na.rm=T),xlim = c(-1,1.6),ylim = c(-1,1.6),main = "Group 2 coefficients",col=2)
  abline(a=0,b=1)
  plot(param[51:75],apply(coefficient_estimates[,seq(2,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 3 coefficients",col=3)
  abline(a=0,b=1)
  plot(param[76:100],apply(coefficient_estimates[,seq(77,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 4 coefficients",col=4)
  abline(a=0,b=1)
  plot(param[101:125],apply(coefficient_estimates[,seq(3,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 5 coefficients",col=5)
  abline(a=0,b=1)
  plot(param[126:150],apply(coefficient_estimates[,seq(78,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 6 coefficients",col=6)
  abline(a=0,b=1)
  plot(c(mean(param[1:25]),mean(param[26:50]),mean(param[51:75]),mean(param[76:100]),mean(param[101:125]),mean(param[126:150])),apply(mu_estimates,2,mean,na.rm=T),xlim = c(-0.2,0.6),ylim = c(-0.2,0.6),main = expression(mu),col=1:6,pch=1)
  abline(a=0,b=1)
  plot(c(var(param[1:25]),var(param[26:50]),var(param[51:75]),var(param[76:100]),var(param[101:125]),var(param[126:150])),apply(sigma2_estimates,2,mean,na.rm=T),xlim = c(0,0.15),ylim = c(0,0.15),main = expression(sigma^2),col=1:6,pch=1)
  abline(a=0,b=1)
  par(mar=c(0,0,0,0))
  plot.new()
  plot.window(xlim=c(0,1), ylim=c(0,1))
  legend(x=-0.12,y=0.8,legend =c("y-axis: average estimate over 60 simulated\n data sets","x-axis (coefficients): true value",expression(paste("x-axis ",(mu),": sample mean of true group coefs.")),expression(paste("x-axis ",(sigma^2),": sample variance of true group coefs.")),paste0("nr of individuals per simulated data set: ",i)),bty = "n",cex = 0.9)
  mtext(paste0("400 individuals per data set"), outer = TRUE, cex = 1.2,line = 1)

```

\


```{r echo=F}
load("../data/params_50covs_2groups_25_per_group.Rdata")
load( "../data/sim_illness_death_1000obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")

i<-"1000"
local_path<-paste0("../data/sim_illness_death_",i,"obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
  load(local_path)
  par(mfrow=c(3,3),mar=c(2,2,2,2),oma = c(0, 0, 2.5, 0))
  plot(param[1:25],apply(coefficient_estimates[,seq(1,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 1 coefficients",col=1)
  abline(a=0,b=1)
  plot(param[26:50],apply(coefficient_estimates[,seq(76,150,3)],2,mean,na.rm=T),xlim = c(-1,1.6),ylim = c(-1,1.6),main = "Group 2 coefficients",col=2)
  abline(a=0,b=1)
  plot(param[51:75],apply(coefficient_estimates[,seq(2,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 3 coefficients",col=3)
  abline(a=0,b=1)
  plot(param[76:100],apply(coefficient_estimates[,seq(77,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 4 coefficients",col=4)
  abline(a=0,b=1)
  plot(param[101:125],apply(coefficient_estimates[,seq(3,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 5 coefficients",col=5)
  abline(a=0,b=1)
  plot(param[126:150],apply(coefficient_estimates[,seq(78,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 6 coefficients",col=6)
  abline(a=0,b=1)
  plot(c(mean(param[1:25]),mean(param[26:50]),mean(param[51:75]),mean(param[76:100]),mean(param[101:125]),mean(param[126:150])),apply(mu_estimates,2,mean,na.rm=T),xlim = c(-0.2,0.6),ylim = c(-0.2,0.6),main = expression(mu),col=1:6,pch=1)
  abline(a=0,b=1)
  plot(c(var(param[1:25]),var(param[26:50]),var(param[51:75]),var(param[76:100]),var(param[101:125]),var(param[126:150])),apply(sigma2_estimates,2,mean,na.rm=T),xlim = c(0,0.15),ylim = c(0,0.15),main = expression(sigma^2),col=1:6,pch=1)
  abline(a=0,b=1)
  par(mar=c(0,0,0,0))
  plot.new()
  plot.window(xlim=c(0,1), ylim=c(0,1))
  legend(x=-0.12,y=0.8,legend =c("y-axis: average estimate over 60 simulated\n data sets","x-axis (coefficients): true value",expression(paste("x-axis ",(mu),": sample mean of true group coefs.")),expression(paste("x-axis ",(sigma^2),": sample variance of true group coefs.")),paste0("nr of individuals per simulated data set: ",i)),bty = "n",cex = 0.9)
  mtext(paste0("1000 individuals per data set"), outer = TRUE, cex = 1.2,line = 1)

```

\
   
```{r echo=F}
load("../data/params_50covs_2groups_25_per_group.Rdata")
load( "../data/sim_illness_death_8000obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")

i<-"8000"
  local_path<-paste0("../data/sim_illness_death_",i,"obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")
  load(local_path)
  par(mfrow=c(3,3),mar=c(2,2,2,2),oma = c(0, 0, 2.5, 0))
  plot(param[1:25],apply(coefficient_estimates[,seq(1,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 1 coefficients",col=1)
  abline(a=0,b=1)
  plot(param[26:50],apply(coefficient_estimates[,seq(76,150,3)],2,mean,na.rm=T),xlim = c(-1,1.6),ylim = c(-1,1.6),main = "Group 2 coefficients",col=2)
  abline(a=0,b=1)
  plot(param[51:75],apply(coefficient_estimates[,seq(2,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 3 coefficients",col=3)
  abline(a=0,b=1)
  plot(param[76:100],apply(coefficient_estimates[,seq(77,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 4 coefficients",col=4)
  abline(a=0,b=1)
  plot(param[101:125],apply(coefficient_estimates[,seq(3,75,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 5 coefficients",col=5)
  abline(a=0,b=1)
  plot(param[126:150],apply(coefficient_estimates[,seq(78,150,3)],2,mean,na.rm=T),xlim = c(-1,1),ylim = c(-1,1),main = "Group 6 coefficients",col=6)
  abline(a=0,b=1)
  plot(c(mean(param[1:25]),mean(param[26:50]),mean(param[51:75]),mean(param[76:100]),mean(param[101:125]),mean(param[126:150])),apply(mu_estimates,2,mean,na.rm=T),xlim = c(-0.2,0.6),ylim = c(-0.2,0.6),main = expression(mu),col=1:6,pch=1)
  abline(a=0,b=1)
  plot(c(var(param[1:25]),var(param[26:50]),var(param[51:75]),var(param[76:100]),var(param[101:125]),var(param[126:150])),apply(sigma2_estimates,2,mean,na.rm=T),xlim = c(0,0.15),ylim = c(0,0.15),main = expression(sigma^2),col=1:6,pch=1)
  abline(a=0,b=1)
  par(mar=c(0,0,0,0))
  plot.new()
  plot.window(xlim=c(0,1), ylim=c(0,1))
  legend(x=-0.12,y=0.8,legend =c("y-axis: average estimate over 60 simulated\n data sets","x-axis (coefficients): true value",expression(paste("x-axis ",(mu),": sample mean of true group coefs.")),expression(paste("x-axis ",(sigma^2),": sample variance of true group coefs.")),paste0("nr of individuals per simulated data set: ",i)),bty = "n",cex = 0.9)
  mtext(paste0("8000 individuals per data set"), outer = TRUE, cex = 1.2,line = 1)
```

\
Code used to perform the simulation
```{r eval=F,include=T}
library(flexsurv)
library(mvtnorm)
library(ebsurv)

setwd("~/Google Drive/RWORK/ebsurv code/code")
n<-400 #number of individuals
covariate_names<-paste0("Cov",1:50)
nGroups<-2
nParam<-3*length(covariate_names)
nr_simulated_data_sets<-60

coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 150)
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=6)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 6)

load("../data/params_50covs_2groups_25_per_group.Rdata")

for (j in 1:nr_simulated_data_sets){
  
  #covariates
  covariance_of_covariates<-diag(rbeta(length(covariate_names),1,20)) + 1e-3
  covariate_matrix<-rmvnorm(n,mean = rep(0,length(covariate_names)),sigma = covariance_of_covariates)
  covariate_matrix[] <-as.numeric(covariate_matrix > quantile(covariate_matrix, 0.75))
  colnames(covariate_matrix)<-covariate_names

  #relative risks
  rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
  rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
  rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
  
  #Generate a transition history for each patient. Homogeneous semi-Markov model. Baseline hazard is Gompertz for all transitions. 

  m<-matrix(c(rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
  v1<-apply(m,1,which.min)
  m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
  m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
  m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
  m<-cbind(m,rexp(n,0.05))
  m<-cbind(m,(m[,5]<m[,4]))
  colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
  m<-as.data.frame(m)

  #convert the data to long format
  mstate.data<-data.frame()

  for(i in 1:nrow(m)){
    id<-rep(i,2)
    from<-c(1,1)
    to<-c(2,3)
    trans<-c(1,2)
    Tstart<-c(0,0)
    Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
    time<-Tstop-Tstart
    status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
    mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status)) 
    if(status[1]==1){
      id<-i
      from<-2
      to<-4
      trans<-3
      Tstart<-Tstop[1]
      Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
      time<-Tstop-Tstart
      status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
      mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
                                                Tstart=Tstart,Tstop=Tstop,time=time,status=status))
    }
  }
  
  #add covariates
  mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
  
  #attributes and class
  tmat<-transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
  class(mstate.data)<-c("data.frame","msdata")
  attr(mstate.data,"trans")<-tmat
  
  #expand covariates
  mstate.data<-expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
  
  #Fit homogeneous semi-Markov random effects model. Check fit.
  
  #argument 'Z' of coxrfx
  Z<-mstate.data[,-(1:(8+length(covariate_names)))]
  #Z<-mstate.data[,-(1:8)]
  Z$strata<-mstate.data$trans
  
  #argument 'surv' of coxrfx
  surv<-Surv(mstate.data$time,mstate.data$status)
  
  #argument 'groups' of coxrfx
  groups<-c(rep(c("group1","group3","group5"), 25),rep(c("group2","group4","group6"), 25))
  
  
  #fit random effects model
  coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 200,tol = 0.001)

  coefficient_estimates[j,]<-coxrfx_object$coefficients
  mu_estimates[j,]<-coxrfx_object$mu
  sigma2_estimates[j,]<-coxrfx_object$sigma2
 
  save(coefficient_estimates,mu_estimates,sigma2_estimates,file = "../data/sim_illness_death_400obs_2group_per_trans_25vars_each_group_params_50covs_2groups_25_per_group.Rdata")

  print(j)
}
```


# Testing probtrans_ebsurv
The following plot shows that `probtrans_ebsurv` can accurately compute transition probabilities under a homogeneous semi-Markov model, given the vectors of cumulative hazards for each transition (i.e., given its input). The dashed red lines were computed using a data set of 100,000 simulated disease histories for the same patient (or, equivalently, 100,000 patients with the same vector of covariates). For any time t, these lines give the relative frequencies of each state. The solid black lines represent the transition probabilities as computed by `probtrans_ebsurv` when the true (Gompertz) cumulative hazards are given to it as input.

```{r echo=F, message=FALSE, warning=FALSE}
library(ebsurv)
load("../data/testing_probtrans_ebsurv.Rdata")

plot(probtrans_object,legend = c("","","",""),lwd = 2)
lines(time_vector,rel_freq_1,lwd=2,col="red",lty=3)
lines(time_vector,rel_freq_12,lwd=2,col="red",lty=3)
lines(time_vector,rel_freq_123,lwd=2,col="red",lty=3)
lines(time_vector,rel_freq_1234,lwd=2,col="red",lty=3)
text(10,0.3,"health")
text(37,0.4,"illness")
text(78,0.07,"death")
text(67,0.6,"death_after_illness")
legend("bottomleft", legend = c("using probtrans_ebsurv","by simulation"),cex = 0.7,lty = c(1,3),col = c(1,"red"))

```

\
Code used to generate the previous plot.
```{r eval=F,include=T}
# Load packages and set working directory
library(flexsurv)
library(ebsurv)
setwd("~/Google Drive/RWORK/ebsurv code/code")

#generate a vector of covariates for the patient
n<-1000
nCovs<-50
covariance_of_covariates<-diag(rbeta(nCovs,1,20)) + 1e-3
covariate_matrix<-rmvnorm(n,mean = rep(0,nCovs),sigma = covariance_of_covariates)
covariate_matrix[] <-as.numeric(covariate_matrix > quantile(covariate_matrix, 0.75))
covariate_vector<-covariate_matrix[1,]
rm(covariate_matrix,covariance_of_covariates)
#save(covariate_vector,file="../data/covariate_vector.Rdata")

#compute the relative risk of the patient for each transition
load("../data/params_50covs_2groups_25_per_group.Rdata")
load("../data/covariate_vector.Rdata")
rel.risk_trans1<-exp(sum(covariate_vector*param[(1+nCovs*0):(nCovs*1)]))
rel.risk_trans2<-exp(sum(covariate_vector*param[(1+nCovs*1):(nCovs*2)]))
rel.risk_trans3<-exp(sum(covariate_vector*param[(1+nCovs*2):(nCovs*3)]))

#generate 100,000 uncensored observations for the same patient
n<-100000
m<-matrix(c(rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
v1<-apply(m,1,which.min)
m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,rgompertz(1,shape = 0.15,rate = rel.risk_trans3*exp(-5.5)),NA)))
m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
colnames(m)<-c("state1_duration","transition","state2_duration","total_time")
m<-as.data.frame(m)


#Build a function that computes relative frequencies of each state at some time t
rel_freq<-function(state,t){
  if(state==1){
    sum(m[,1]>t)/nrow(m)
  }else if(state==2){
    sum(m[,1]<t & m[,2]==1 & m[,4]>t)/nrow(m)
  }else if(state==3){
    sum(m[,1]<t & m[,2]==2)/nrow(m)
  }else if(state==4){
    sum(m[,2]==1 & m[,4]<t)/nrow(m)
  }
}

#Vectorise the cumulative hazards of the patient
time_vector<-seq(0,80,0.01)
cumhaz1<-Hgompertz(time_vector, shape=0.1, rate = rel.risk_trans1*exp(-4.5))
cumhaz2<-Hgompertz(time_vector, shape=0.1, rate = rel.risk_trans2*exp(-4.65))
cumhaz3<-Hgompertz(time_vector, shape=0.15, rate = rel.risk_trans3*exp(-5.5))
cumhaz1<-data.frame(time=time_vector,Haz=cumhaz1,trans=1)
cumhaz2<-data.frame(time=time_vector,Haz=cumhaz2,trans=2)
cumhaz3<-data.frame(time=time_vector,Haz=cumhaz3,trans=3)

#build an msfit object
tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_illness"))
msfit_object<-list(Haz=rbind(cumhaz1,cumhaz2,cumhaz3),trans=tmat)
class(msfit_object)<-c("msfit","coxrfx")

#Calculate transition probabilities
probtrans_object<-probtrans_ebsurv(msfit_object,'semiMarkov')
rel_freq_1<-sapply(time_vector,rel_freq,state=1)
rel_freq_12<-rel_freq_1+sapply(time_vector,rel_freq,state=2)
rel_freq_123<-rel_freq_12+sapply(time_vector,rel_freq,state=3)
rel_freq_1234<-rel_freq_123+sapply(time_vector,rel_freq,state=4)
#save(probtrans_object,rel_freq_1,rel_freq_12,rel_freq_123,rel_freq_1234,time_vector,file = "../data/testing_probtrans_ebsurv.Rdata")

#compare estimates obtained by simulation with the probabilities computed by probtrans_ebsurv
plot(probtrans_object,legend = c("","","",""))
lines(time_vector,rel_freq_1,lwd=0.6,col="light green",lty=2)
lines(time_vector,rel_freq_12,lwd=0.6,col="light green",lty=2)
lines(time_vector,rel_freq_123,lwd=0.6,col="light green",lty=2)
lines(time_vector,rel_freq_1234,lwd=0.6,col="light green",lty=2)
text(10,0.3,"health")
text(37,0.4,"illness")
text(78,0.07,"death")
text(67,0.6,"death_after_illness")
legend("bottomleft", legend = c("by simulation","using probtrans_ebsurv"),cex = 0.7,lty = c(1,2),col = c(1,"light green"))

```

# Computation of transition probabilities for semi-Markov processes

To compute transition probabilities for semi-Markov models, the function $\texttt{protrans_ebmstate}$ uses the following results. See section [...].\
Result 1:
\begin{align*}
&f\left[X_{1}=1,T_{1}=t_{1}\right]\\
&=\lim_{h \to 0}\frac{\mathrm{P}\left[X_{1}=1,T_{1}\in \left[t_{1},t_{1}+h\right)\right]}{h}\\
&=\lim_{h \to 0}\mathrm{P} \left[T_{1} \geq t_{1}\right]\frac{\mathrm{P}\left[X_{1}=1,T_{1}\in \left[t_{1},t_{1}+h\right)|T_{1} \geq t_{1}\right]}{h}\\
&=\mathrm{P} \left[T_{1} \geq t_{1}\right]\lambda_{01}\left(t_{1}\right)\\
&=\exp\left[-\Lambda_{0}\left(t_{1}\right)\right]\,\lambda_{01}\left(t_{1}\right)\quad.
\end{align*}
\
Result 2:

\begin{align*}
&f\left[X_{i}=i,T_{i}=t_{i}\right]\\
&=\int_{0}^{t_{i}}f\left[X_{i}=i,T_{i}=t_{i},X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}f\left[X_{i}=i,T_{i}=t_{i}\,|\,X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0}  \frac{\mathrm{P}\left[X_{i}=i,T_{i}\in \left[t_{i},t_{i}+h\right)\,|\, X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0} \mathrm{P}\left[T_{i}\geq t_{i} \,|\,X_{i-1}=i-1,T_{i-1}=t_{i-1}\right] \frac{\mathrm{P}\left[X_{i}=i,T_{i}\in \left[t_{i},t_{i}+h\right)\,|\, T_{i}\geq t_{i},X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0} \mathrm{P}\left[S_{i}\geq s_{i} \,|\,X_{i-1}=i-1\right] \frac{\mathrm{P}\left[X_{i}=i,S_{i}\in \left[s_{i},s_{i}+h\right)\,|\, S_{i}\geq s_{i},X_{i-1}=i-1\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\exp\left[-\Lambda_{i-1}\left(s_{i}\right)\right]\,\lambda_{i-1,i}\left(s_{i}\right) f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\quad.
\end{align*}
\
Result 3:

\begin{align*}
&\mathrm{P}\left[X_{n}=n,T_{n}\leq t , \tau_{\scriptscriptstyle n+1}> t-T_{n}\right]\\
&=\int_{0}^{t}\int_{t-t_{n}}^{\infty}f\left[X_{n}=n,T_{n}=t_{n},\tau_{\scriptscriptstyle n+1}=u\right]\mathrm{d}u\,\mathrm{d}t_{n}\\
&=\int_{0}^{t}\int_{t-t_{n}}^{\infty}f\left[\tau_{\scriptscriptstyle  n+1}=u|X_{n}=n,T_{n}=t_{n}\right]f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}u \,\mathrm{d}t_{n}\\
&=\int_{0}^{t} \mathrm{P}\left[\tau_{\scriptscriptstyle  n+1}>t-t_{n}|X_{n}=n,T_{n}=t_{n}\right]f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}t_{n}\\
&=\int_{0}^{t} \mathrm{P}\left[\tau_{\scriptscriptstyle  n+1}>t-t_{n}|X_{n}=n \right]f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}t_{n}\\
&=\int_{0}^{t} \exp\left[-\Lambda_{n}\left(t-t_{n}\right)\right]\, f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}t_{n}\quad.
\end{align*}

# Computation of transition probabilities for Markov processes
Let the disease progression process $\left\lbrace X(t)\right\rbrace$ have a tree-like structure, meaning that the transition between any two states is either not possible or follows a unique sequence of states. In addition, suppose, for $h > 0$,
\begin{align*}
& \mathrm{P}\left[ X(t+h)=x(t+h)\; |\, X(u)=x(u),\vec{Z}(u)=\mathbf{z}(u), 0\leq u \leq t\right]\\
&=\mathrm{P}\left[ X(t+h)=x(t+h)\; |\, X\left(t\right)=x(t), \vec{Z}(0)=\mathbf{z}(0)\right]\quad,  
\end{align*}
and
\begin{align*}
&\lim_{h \to 0} \frac{\mathrm{P}\left[ X(t+h)=j\; |\, X\left(t\right)=i,\, \vec{Z}(0)=\mathbf{z}\right]}{h} \nonumber \\
&= \lambda^{\scriptscriptstyle(0)}_{ij}(t)\,\exp \left\lbrace\boldsymbol{\beta}_{\scriptscriptstyle ij}^{\intercal}\, \mathbf{z} \right\rbrace\quad.
\end{align*} 
Note that the relative risk of a patient is determined by her covariate vector at $t=0$. 
For convenience, let the initial state be labelled $0$, the target state  be labelled $n$, and the sequence of states from $0$ to $n$ have the labels $0,1,2,...,n\;$. In addition, define $X_{0}:=X(0)$ and $T_{0}:=0$, and let $\left(X_{i},T_{i}\right)$, $i \in \left\lbrace 1,2,... \right\rbrace$, denote the marked point process associated with $\left\lbrace X(t)\right\rbrace$, so that $T_{i}$ is the time of the $i^{th}$ transition and $X_{i}$ is the state the process jumps to at time $T_{i}$. The inter-transition times are denoted by  $\tau_{i}:=T_{i}-T_{i-1}$.
We can write the transition probability function for the initial state $0$ and target state $n$, and a patient  with covariate vector $\vec{Z}(0)=\mathbf{z}$, as 
\begin{align}
\label{eq:trans_prob}
t \mapsto p\left(t;n,\mathbf{z}\right)=\mathrm{P}\left[X(t)=n\,|\,X(0)=0\,, \vec{Z}(0)=\mathbf{z} \right]=\mathrm{P}\left[X_{n}=n,T_{n} \leq t,\tau_{n+1}>t- T_{n} \right|X_{0}=0\,, \vec{Z}\left(0\right)=\mathbf{z}] \,.
\end{align}
Let $\lambda_{i,i+1}\left(t\,|\, \mathbf{z}\right)$ denote the hazard rate function at time $t$ for a patient with covariate vector $\vec{Z}(0)=\mathbf{z}$, and $\Lambda_{i,i+1}\left(u,v \,|\, \mathbf{z}\right)=\int_{u}^{v}\lambda_{i,i+1}\left(x\,|\, \mathbf{z}\right)\mathrm{d}x$ denote the corresponding cumulative hazard rate function. Likewise, we let $\lambda_{i}\left(t\,|\, \mathbf{z}\right)$ represent the hazard rate function of going from state $i$ to any state that can be reached directly from $i$, and $\Lambda_{i}\left(u,v \,|\, \mathbf{z}\right)$ represent the corresponding cumulative hazard rate function.
 In what follows, all references to probabilities, density functions, hazard rates and cumulative hazard rates are to be understood as conditional on $X_{0}=0$ and  $\vec{Z}(0)=\mathbf{z}\,$: the expression `$|X_{0}=0 \,,\,\vec{Z}(0)=\mathbf{z}$' is omitted to simplify the notation. Probability density functions are represented by $f[\cdot]$.

To compute an estimate of the transition probability 
for a given $t$, $\texttt{probtrans_ebmstate}$ relies on the following three results.

Result 1:
\begin{align*}
&f\left[X_{1}=1,T_{1}=t_{1}\right]\\
&=\lim_{h \to 0}\frac{\mathrm{P}\left[X_{1}=1,T_{1}\in \left[t_{1},t_{1}+h\right)\right]}{h}\\
&=\lim_{h \to 0}\mathrm{P} \left[T_{1} \geq t_{1}\right]\frac{\mathrm{P}\left[X_{1}=1,T_{1}\in \left[t_{1},t_{1}+h\right)|T_{1} \geq t_{1}\right]}{h}\\
&=\mathrm{P} \left[T_{1} \geq t_{1}\right]\lambda_{01}\left(t_{1}\right)\\
&=\exp\left[-\Lambda_{0}\left(t_{1}\right)\right]\,\lambda_{01}\left(t_{1}\right)\quad.
\end{align*}
\
Result 2:

\begin{align*}
&f\left[X_{i}=i,T_{i}=t_{i}\right]\\
&=\int_{0}^{t_{i}}f\left[X_{i}=i,T_{i}=t_{i},X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}f\left[X_{i}=i,T_{i}=t_{i}\,|\,X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0}  \frac{\mathrm{P}\left[X_{i}=i,T_{i}\in \left[t_{i},t_{i}+h\right)\,|\, X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0} \mathrm{P}\left[T_{i}\geq t_{i} \,|\,X_{i-1}=i-1,T_{i-1}=t_{i-1}\right] \frac{\mathrm{P}\left[X_{i}=i,T_{i}\in \left[t_{i},t_{i}+h\right)\,|\, T_{i}\geq t_{i},X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\lim_{h \to 0} \mathrm{P}\left[T_{i}\geq t_{i} \,|\,X_{i-1}=i-1,T_{i-1}=t_{i-1}\right] \frac{\mathrm{P}\left[X_{i}=i,T_{i}\in \left[t_{i},t_{i}+h\right)\,|\, T_{i}\geq t_{i},X_{i-1}=i-1\right]}{h}\,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\\
&=\int_{0}^{t_{i}}\exp\left\lbrace-\left[\Lambda_{i-1}\left(t_{i-1},t_{i}\right)\right]\right\rbrace\,\lambda_{i-1,i}\left(t_{i}\right) \,f\left[X_{i-1}=i-1,T_{i-1}=t_{i-1}\right]\mathrm{d}t_{i-1}\quad.
\end{align*}
\
Result 3:

\begin{align*}
&\mathrm{P}\left[X_{n}=n,T_{n}\leq t , \tau_{\scriptscriptstyle n+1}> t-T_{n}\right]\\
&=\int_{0}^{t}\int_{t-t_{n}}^{\infty}f\left[X_{n}=n,T_{n}=t_{n},\tau_{\scriptscriptstyle n+1}=u\right]\mathrm{d}u\,\mathrm{d}t_{n}\\
&=\int_{0}^{t}\int_{t-t_{n}}^{\infty}f\left[\tau_{\scriptscriptstyle  n+1}=u|X_{n}=n,T_{n}=t_{n}\right]f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}u \,\mathrm{d}t_{n}\\
&=\int_{0}^{t} \mathrm{P}\left[\tau_{\scriptscriptstyle  n+1}>t-t_{n}|X_{n}=n,T_{n}=t_{n}\right]f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}t_{n}\\
&=\int_{0}^{t} \exp\left\lbrace-\left[\Lambda_{n}\left(t_{n},t \right)\right]\right\rbrace\, f\left[X_{n}=n,T_{n}=t_{n}\right]\mathrm{d}t_{n}\quad.
\end{align*}

Based on these equations we can write:
\begin{align}
&\mathrm{P}\left[X_{n}=n,T_{n} \leq t,\tau_{n+1}>t- T_{n} \right]\nonumber\\
&=\int_{0}^{t} \int_{0}^{t_{n}} \int_{0}^{t_{n-1}} \dots \int_{0}^{t_{2}} \exp\left[-\Lambda_{n} \left(t_{n},t\right)\right]\prod_{i=1}^{n}\exp\left[-\Lambda_{\scriptscriptstyle i-1} \left(t_{\scriptscriptstyle i-1},t_{\scriptscriptstyle i}\right)\right]\lambda_{\scriptscriptstyle i-1,i}\left(t_{i}\right)\mathrm{d}t_{i} \quad .
\end{align}
Finally, estimates to be plugged into the expression on the right-hand side of the previous equation are obtained using the Breslow estimator of the cumulative hazard rate (here denoted $\hat{\Lambda}$). In particular,
 \begin{align*}
 \Lambda_{i}(u,v)&\approx\sum_{j}\left[\hat{\Lambda}_{ij}\left(v\right)-\hat{\Lambda}_{ij}\left(u\right)\right]
 \end{align*}
and
 \begin{align*}
 \lambda_{ij}(u)\mathrm{d}u&\approx\hat{\Lambda}_{ij}(u+\mathrm{d}u)-\hat{\Lambda}_{ij}(u)\quad.
 \end{align*}
 

# Estimator performance (section [...] of paper)
\
Set the parameters of the simulation
```{r eval=F,include=T}
set.seed(20078)
#library(flexsurv)
library(mvtnorm)
library(ebsurv)
#library(mstate)

setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:10) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-500
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters
file1<-"../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_10vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata"

```
 
Generate data by simulation
```{r eval=FALSE,include=TRUE}
coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)

coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))


for (j in 1:nr_simulated_data_sets){
  
  #covariates
  if(length(covariate_names)>1){
    covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
  }else{
    covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
  }
  
  colnames(covariate_matrix)<-covariate_names

  #relative risks (relative hazards)
  rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
  rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
  rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
  
  #Generate a transition history for each patient. Homogeneous semi-Markov model. Baseline hazard is Gompertz for all transitions. 

  m<-matrix(c(flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),flexsurv::rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
  v1<-apply(m,1,which.min)
  m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
  m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,flexsurv::rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
  m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
  m<-cbind(m,rexp(n,0.03))
  m<-cbind(m,(m[,5]<m[,4]))
  colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
  m<-as.data.frame(m)

  #convert the data to long format
  mstate.data<-data.frame()

  for(i in 1:nrow(m)){
    id<-rep(i,2)
    from<-c(1,1)
    to<-c(2,3)
    trans<-c(1,2)
    Tstart<-c(0,0)
    Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
    time<-Tstop-Tstart
    status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
    mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status)) 
    if(status[1]==1){
      id<-i
      from<-2
      to<-4
      trans<-3
      Tstart<-Tstop[1]
      Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
      time<-Tstop-Tstart
      status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
      mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
                                                Tstart=Tstart,Tstop=Tstop,time=time,status=status))
    }
  }
  
  #add covariates
  mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
  
  #attributes and class
  tmat<-mstate::transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
  class(mstate.data)<-c("data.frame","msdata")
  attr(mstate.data,"trans")<-tmat
  
  
  #expand covariates
  mstate.data<-mstate::expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
  
  #Fit homogeneous semi-Markov empirical Bayes model. 
  
  #argument 'Z' of coxrfx
  Z<-mstate.data[,-(1:(8+length(covariate_names)))]
  Z$strata<-mstate.data$trans
  
  #argument 'surv' of coxrfx
  surv<-survival::Surv(mstate.data$time,mstate.data$status)
  
  #argument 'groups' of coxrfx
  groups<-rep("unique_group",length(param))
  
  #fit random effects model
  coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")

  coefficient_estimates[j,]<-coxrfx_object$coefficients
  mu_estimates[j,]<-coxrfx_object$mu
  sigma2_estimates[j,]<-coxrfx_object$sigma2
  
  #fit fixed effects model
  
  model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
  coxph_object<-survival::coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
  
  coefficient_estimates_coxph[j,]<-coxph_object$coefficients
 
  if(j %%10==0){
    save(coefficient_estimates,mu_estimates,sigma2_estimates,coefficient_estimates_coxph,param,file = file1)
  }

  print(j)
}
```


Code to generate grid of plots in paper
```{r}

file_paths<-c("../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_1vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata","../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_3vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata","../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_5vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata","../data/coxph_vs_coxrfx_sim_illness_death_250obs_1group_for_all_trans_10vars_each_group_500sets_dfMethod_unifParams_allHyperParams.Rdata")

pdf("../plots/coxrfx_vs_coxph_plot_grid.pdf",height=8,width = 9)

par(mfcol=c(3,4),mar=c(5.1, 4.1, 3.1, 1.1))
for(file1 in file_paths){
#mse comparison 
load(file1)
#reorder matrix of estimates
coefficient_estimates<-coefficient_estimates[,c(seq(1,ncol(coefficient_estimates),3),seq(2,ncol(coefficient_estimates),3),seq(3,ncol(coefficient_estimates),3))]
coefficient_estimates_coxph<-coefficient_estimates_coxph[,c(seq(1,ncol(coefficient_estimates),3),seq(2,ncol(coefficient_estimates),3),seq(3,ncol(coefficient_estimates),3))]

  
#errors
errors_coxrfx<-t(coefficient_estimates)-param
errors_coxph<-t(coefficient_estimates_coxph)-param

#sse
sse_coxrfx<-apply(errors_coxrfx^2,2,sum,na.rm=T)
sse_coxph<-apply(errors_coxph^2,2,sum,na.rm=T)

file2<-strsplit(file1,"/data/")[[1]][2]
file3<-strsplit(file2,".Rdata")

plot(0,type="n",xlim=c(-0.5,1),ylim=c(-0.5,1),ylab="average point estimate",xlab="true parameter",cex.lab=0.8,cex.axis=1,las=1,cex.lab=1.3)
points(param,apply(coefficient_estimates,2,mean,na.rm=T),cex=0.8,col="red")
points(param,apply(coefficient_estimates_coxph,2,mean,na.rm=T),cex=0.8,col="black")
abline(a=0,b=1)
legend(x=-0.6,y=1.1,legend = c("Cox","empirical Bayes Cox"),pch = 1,cex = 0.9,col = c("black","red"))

var_coef_estimates<-apply(coefficient_estimates,2,var,na.rm=T)
var_coef_estimates_coxph<-apply(coefficient_estimates_coxph,2,var,na.rm=T)
barplot(matrix(c(var_coef_estimates_coxph,var_coef_estimates),nrow = 2,byrow = T),col=c("black","red"),beside=T,las=1,ylim=c(0,0.18),ylab = "sample variance",cex.lab=1.1,mgp=c(3,1,0),border=NA)
mtext("regression coefficient",side = 1,line = 1,cex=0.8)
legend("topright",legend = c("Cox","empirical Bayes Cox"),fill = c("black","red"),cex = 0.9)

plot(density(sse_coxrfx,from = 0,kernel = "gaussian",na.rm = T),main="",ylab ="estimated density",xlab="sum of squared errors",xlim=c(0,5.5),ylim=c(0,3.5),col="red",lty=1,las=1,cex.lab=1.3)
lines(density(sse_coxph,from = 0,kernel = "gaussian",na.rm = T),lty=1)
legend("topright",legend = c("Cox","empirical Bayes Cox"),lty = c(1,1),cex = 0.9,col = c("black","red"))
}

dev.off()
```

# Generate sample multi-state data for package

```{r eval=F,include=T}
set.seed(20078)
library(flexsurv)
library(mvtnorm)
library(ebsurv)

setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:10) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-1
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters

coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)

coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))


for (j in 1:nr_simulated_data_sets){
  
  #covariates
  if(length(covariate_names)>1){
    covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
  }else{
    covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
  }
  
  colnames(covariate_matrix)<-covariate_names

  #relative risks (relative hazards)
  rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
  rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
  rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
  
  #Generate a transition history for each patient. Homogeneous semi-Markov model. Baseline hazard is Gompertz for all transitions. 

  m<-matrix(c(rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
  v1<-apply(m,1,which.min)
  m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
  m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
  m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
  m<-cbind(m,rexp(n,0.03))
  m<-cbind(m,(m[,5]<m[,4]))
  colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
  m<-as.data.frame(m)

  #convert the data to long format
  mstate_data_sample<-data.frame()

  for(i in 1:nrow(m)){
    id<-rep(i,2)
    from<-c(1,1)
    to<-c(2,3)
    trans<-c(1,2)
    Tstart<-c(0,0)
    Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
    time<-Tstop-Tstart
    status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
    mstate_data_sample<-rbind(mstate_data_sample,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status)) 
    if(status[1]==1){
      id<-i
      from<-2
      to<-4
      trans<-3
      Tstart<-Tstop[1]
      Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
      time<-Tstop-Tstart
      status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
      mstate_data_sample<-rbind(mstate_data_sample,data.frame(id=id,from=from,to=to,trans=trans,
                                                Tstart=Tstart,Tstop=Tstop,time=time,status=status))
    }
  }
  
  #add covariates
  mstate_data_sample<-cbind(mstate_data_sample,covariate_matrix[mstate_data_sample$id,])
  
  #attributes and class
  tmat<-transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
  class(mstate_data_sample)<-c("data.frame","msdata")
  attr(mstate_data_sample,"trans")<-tmat
  
  print(j)
}

save(mstate_data_sample,file="../data/mstate_data_sample.RData")
```



# Support code

Generate an example data set in long format to use in section `survival analysis workflow' Do not run as an R markdown chunk!
```{r eval=FALSE, include=TRUE}
long_format_data<-read.csv("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/data/long_format_data.csv")
sink("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/data/long_format_data.txt") 
long_format_data
sink()

```


Set the parameters of the simulation
```{r eval=F,include=T}
set.seed(20078)
library(flexsurv)
library(mvtnorm)
library(ebsurv)

setwd("/Users/ruibarrigana/Library/Mobile Documents/com~apple~CloudDocs/RWORK/ebsurv code/code")
n<-250 # number of patients
covariate_names<-paste0("Cov",1:5) #number of covariates (for each transition)
nGroups<-1/3 #number of groups per transition
nParam<-3*length(covariate_names) #total number of parameters (regression coefficients)
nr_simulated_data_sets<-10
param<-runif(n=nParam,min = -0.5,max = 1) #simulation of parameters


coefficient_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))
mu_estimates<-matrix(nrow = nr_simulated_data_sets,ncol=3*nGroups)
sigma2_estimates<-matrix(nrow = nr_simulated_data_sets,ncol = 3*nGroups)

coefficient_estimates_coxph<-matrix(nrow = nr_simulated_data_sets,ncol = 3*length(covariate_names))


for (j in 1:nr_simulated_data_sets){
  
  #covariates
  if(length(covariate_names)>1){
    covariate_matrix<-t(sapply(rep(length(covariate_names),n),function(x) rbinom(n=x,size = 1,prob = 0.5)))
  }else{
    covariate_matrix<-matrix(rbinom(n,size = 1,prob = 0.5),ncol=1)
  }
  
  colnames(covariate_matrix)<-covariate_names

  #relative risks (relative hazards)
  rel.risk_trans1<-exp(covariate_matrix%*%param[(1+length(covariate_names)*0):(length(covariate_names)*1)])
  rel.risk_trans2<-exp(covariate_matrix%*%param[(1+length(covariate_names)*1):(length(covariate_names)*2)])
  rel.risk_trans3<-exp(covariate_matrix%*%param[(1+length(covariate_names)*2):(length(covariate_names)*3)])
  
  #Generate a transition history for each patient. Homogeneous semi-Markov model. Baseline hazard is Gompertz for all transitions. 

  m<-matrix(c(rgompertz(n, shape=0.1, rate = rel.risk_trans1*exp(-4.5)),rgompertz(n, shape=0.1, rate = rel.risk_trans2*exp(-4.65))),ncol = 2)
  v1<-apply(m,1,which.min)
  m<-cbind(sapply(1:nrow(m),function(x) m[x,v1[x]]),v1)
  m<-cbind(m,sapply(1:nrow(m), function(x) ifelse(m[x,2]==1,rgompertz(1,shape = 0.15,rate = rel.risk_trans3[x]*exp(-5.5)),NA)))
  m<-cbind(m,apply(m[,c(1,3)],1,sum,na.rm=T))
  m<-cbind(m,rexp(n,0.03))
  m<-cbind(m,(m[,5]<m[,4]))
  colnames(m)<-c("state1_duration","transition","state2_duration","total_time", "cens_time","cens=1")
  m<-as.data.frame(m)

  #convert the data to long format
  mstate.data<-data.frame()

  for(i in 1:nrow(m)){
    id<-rep(i,2)
    from<-c(1,1)
    to<-c(2,3)
    trans<-c(1,2)
    Tstart<-c(0,0)
    Tstop<-rep(min(m$state1_duration[i],m$cens_time[i]),2)
    time<-Tstop-Tstart
    status<-as.numeric(c(m$transition[i]==1 & m$cens_time[i]>m$state1_duration[i],m$transition[i]==2 & m$cens_time[i]>m$state1_duration[i]))
    mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,                                             trans=trans,Tstart=Tstart,Tstop=Tstop,time=time,status=status)) 
    if(status[1]==1){
      id<-i
      from<-2
      to<-4
      trans<-3
      Tstart<-Tstop[1]
      Tstop<-min(m$state1_duration[i]+m$state2_duration[i],m$cens_time[i])
      time<-Tstop-Tstart
      status<-as.numeric(m$state1_duration[i]+m$state2_duration[i]<m$cens_time[i])
      mstate.data<-rbind(mstate.data,data.frame(id=id,from=from,to=to,trans=trans,
                                                Tstart=Tstart,Tstop=Tstop,time=time,status=status))
    }
  }
  
  #add covariates
  mstate.data<-cbind(mstate.data,covariate_matrix[mstate.data$id,])
  
  #attributes and class
  tmat<-transMat(x=list(c(2,3),c(4),c(),c()),names=c("health","illness","death","death_after_illness"))
  class(mstate.data)<-c("data.frame","msdata")
  attr(mstate.data,"trans")<-tmat
  
  #expand covariates
  mstate.data<-expand.covs(mstate.data,covs =names(mstate.data)[-(1:8)])
  
  #Fit homogeneous semi-Markov empirical Bayes model. 
  
  #argument 'Z' of coxrfx
  Z<-mstate.data[,-(1:(8+length(covariate_names)))]
  Z$strata<-mstate.data$trans
  
  #argument 'surv' of coxrfx
  surv<-Surv(mstate.data$time,mstate.data$status)
  
  #argument 'groups' of coxrfx
  groups<-rep("unique_group",length(param))
  
  #fit random effects model
  coxrfx_object<-CoxRFX(Z,surv,groups,max.iter = 600,tol = 0.0001,sigma.hat = "df")

  coefficient_estimates[j,]<-coxrfx_object$coefficients
  mu_estimates[j,]<-coxrfx_object$mu
  sigma2_estimates[j,]<-coxrfx_object$sigma2
  
  #fit fixed effects model
  
  model_formula<-as.formula(paste0("surv~",paste(names(Z)[-length(names(Z))],collapse = "+"),"+strata(strata)"))
  coxph_object<-coxph(formula = model_formula,data=Z,control=coxph.control(iter.max=600))
  
  coefficient_estimates_coxph[j,]<-coxph_object$coefficients
 

  print(j)
}
```
